#!/usr/bin/env python
# -*- coding: utf-8 -*-
# copyright 2015 Santiago Caama単o <scaamanho@gmail.com>
# hereby released under the GNU GPL v3 license.
# use the PyGObject GObject introspection to use GTK+ 3
# also see
# http://readthedocs.org/docs/python-gtk-3-tutorial/en/latest/index.html
# http://developer.gnome.org/gtk3/stable/ (API reference)
"""
An inevitable tool to configure proxy-settings in universities and office environment.
Eliminates the need of repetitive editing of system files that is prone to frequent manual errors.
Ubuntu's default network proxy tool is inefficient and fails to configure system wide settings and
thats the reason for this project's existence.

This tool is based on code "Ubproxy" developed by Sadhanandh Iyer
see https://code.google.com/p/ubproxy/
"""

__author__ = 'Santiago Caama単o'
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk as gtk, GdkPixbuf, GLib

try:
    from gi.repository import AppIndicator3 as AppIndicator
except:
    from gi.repository import AppIndicator
import os
import webbrowser
# Proxy Indicator Config Window
from config_win import ConfigWin


__author__ = 'Santiago Caama単o'
__website__ = 'https://github.com/scaamanho/'

terminal = 'gnome-terminal'
app_name = 'Indicator Proxy'
app_version = '0.3.1'
app_website = 'http://scaamanho.github.io/proxy-indicator/'
enabled_icon = os.path.abspath('images/proxy_on.png')
disabled_icon = os.path.abspath('images/proxy_off.png')


class IndicatorProxy(gtk.Window):
    configWin = None

    def __init__(self):

        gtk.Window.__init__(self, title='')

        # Create if not exist config file
        self.check_config_file()

        # Reference to about dialog
        self.about_dialog = None

        # Create indicator gtk
        # param1: identifier of this indicator
        # param2: name of icon. this will be searched for in the standard them
        # dirs
        # finally, the category. We're monitoring CPUs, so HARDWARE.
        self.ind = AppIndicator.Indicator.new(
            app_name,
            enabled_icon,
            AppIndicator.IndicatorCategory.COMMUNICATIONS)
        # Other indicator caterories
        #                    AppIndicator.IndicatorCategory.SYSTEM_SERVICES)
        #                    AppIndicator.IndicatorCategory.OTHER)
        #                    AppIndicator.IndicatorCategory.APPLICATION_STATUS)
        #                    AppIndicator.IndicatorCategory.HARDWARE)

        # some more information about the AppIndicator:
        # http://developer.ubuntu.com/api/ubuntu-12.04/python/AppIndicator3-0.1.html
        # http://developer.ubuntu.com/resources/technologies/application-indicators/

        # need to set this for indicator to be shown
        self.ind.set_status(AppIndicator.IndicatorStatus.ACTIVE)

        # have to give indicator a menu
        self.menu = gtk.Menu()

        # Add items to menu
        self.mi_enable = gtk.MenuItem()
        self.mi_enable.set_label("Enable")
        self.mi_enable.show()
        # Add item to menu
        self.menu.append(self.mi_enable)
        # Connect signals
        self.mi_enable.connect("activate", self.on_enable_proxy_activate)

        self.mi_disable = gtk.MenuItem()
        self.mi_disable.set_label("Disable")
        self.mi_disable.show()
        self.menu.append(self.mi_disable)
        self.mi_disable.connect("activate", self.on_disable_proxy_activate)

        # Not state menu items (allways enabled)
        item = gtk.MenuItem()
        item.set_label("Configure")
        item.show()
        self.menu.append(item)
        item.connect("activate", self.on_configure_activate)

        # Add separator
        sep = gtk.SeparatorMenuItem()
        sep.show()
        self.menu.append(sep)

        # Menu with submenus
        sub_menu = gtk.Menu()
        #Menu item container
        item = gtk.MenuItem()
        item.set_label(app_name)
        #Set submenu to item
        item.set_submenu(sub_menu)
        item.show()
        self.menu.append(item)

        #Submenu items
        item = gtk.MenuItem()
        item.set_label("About")
        item.connect("activate", self.on_about_activate)
        item.show()
        sub_menu.add(item)

        item = gtk.MenuItem()
        item.set_label("Web Site")
        item.connect("activate", self.on_website_activate)
        item.show()
        sub_menu.add(item)

        item = gtk.MenuItem()
        item.set_label("Exit")
        item.connect("activate", self.on_exit_activate)
        item.show()
        sub_menu.add(item)

        #Show menu
        self.menu.show()

        #Add menu to indicator
        self.ind.set_menu(self.menu)

        # Set idicator state based on proxy
        self.set_indicator_state()


    #Check if proxy is set in system files
    def check_proxy_enabled(self):
        filenames = ["/etc/bash.bashrc", "/etc/environment","/etc/apt/apt.conf.d/95proxies"]
        proxy_enabled = False
        for file_name in filenames:
            try:
                # If find it in one file its enought
                file = open(file_name, 'r')
                line = file.read()
                file.close()
                if line.find('http_proxy') != -1:
                    proxy_enabled = True
                    break
            except:
                print file_name+" not found"
        return proxy_enabled

    #Check if exist config file and create if not exist
    def check_config_file(self):
        directory = os.getenv("HOME")+'/.config/proxy-indicator'
        if not os.path.exists(directory):
            os.makedirs(directory)
        self.config_file = directory + '/config.ini'
        if (not os.path.exists(self.config_file)):
            lines = []
            lines.append('[ProxyConfig]\n')
            lines.append('proxy.host = \n')
            lines.append('proxy.port = \n')
            lines.append('proxy.user = \n')
            lines.append('proxy.password =\n')
            lines.append('proxy.auth = True\n')
            file =  open(self.config_file, "w+")
            for line in lines:
                file.write(line)
            file.close()
        pass

    # Enables proxy on system
    def on_enable_proxy_activate(self, evt):
        # Enable proxy on system
        command = 'gksudo ./ubproxy enable '+self.config_file
        os.system(command)
        host = 'http://proxy.system.local'
        port = '80'
        os.system('gsettings set org.gnome.system.proxy mode manual')
        os.system('gsettings set org.gnome.system.proxy.http host ' + host)
        os.system('gsettings set org.gnome.system.proxy.http port ' + port)
        os.system('gsettings set org.gnome.system.proxy.https host ' + host)
        os.system('gsettings set org.gnome.system.proxy.https port ' + port)

        #Show result message Dialog
        if self.check_proxy_enabled():
            self.show_dialog('Proxy Successfully Set')

        #Update indicator state
        self.set_indicator_state()


    # Disable proxy on system
    def on_disable_proxy_activate(self, evt):
        # Disable proxy on system
        command = 'gksudo ./ubproxy disable '+self.config_file
        os.system(command)
        os.system('gsettings set org.gnome.system.proxy mode none')

         #Show result message Dialog
        if not self.check_proxy_enabled():
            self.show_dialog('Proxy Successfully Removed')

        #Update indicator state
        self.set_indicator_state()

    # Launch configuration window
    def on_configure_activate(self, evt):
        print('configure proxy')
        if self.configWin is None:
            self.configWin = ConfigWin()
        else:
            self.configWin.__init__()
        self.configWin.show()

    #update menu entries based in proxy state passed
    def set_indicator_state(self):
        proxy_enabled = self.check_proxy_enabled()
        if proxy_enabled:
            self.mi_enable.set_sensitive(False)
            self.mi_disable.set_sensitive(True)
            self.ind.set_icon(enabled_icon)
        else:
            self.mi_enable.set_sensitive(True)
            self.mi_disable.set_sensitive(False)
            self.ind.set_icon(disabled_icon)



    # Show about dialog
    def on_about_activate(self, evt):
        if self.about_dialog:
            self.about_dialog.present()
        else:
            self.about_dialog = self.get_about_dialog()
            self.about_dialog.run()
            self.about_dialog.destroy()
            self.about_dialog = None

    # Open a browser window with a url
    def on_website_activate(self, evt):
        webbrowser.open(app_website)

    # Exit indicator
    def on_exit_activate(self, evt):
        gtk.main_quit()

    def log_item(self, item):
        print(dir(item.props))

    #Show info dialog about proxy change actions
    def show_dialog(self, text_to_show):
        dialog = gtk.MessageDialog(self, 0, gtk.MessageType.INFO,
            gtk.ButtonsType.OK, text_to_show)
        dialog.run()
        dialog.destroy()
        dialog = None

    # Build application about dialog
    def get_about_dialog(self):
        """Create and populate the about dialog."""
        about_dialog = gtk.AboutDialog()
        about_dialog.set_name(app_name)
        about_dialog.set_version(app_version)
        about_dialog.set_copyright('Copyrignt (c) 2015\nSantiago Caama単o')
        about_dialog.set_comments('An indicator for Corporative Proxy')
        about_dialog.set_license('' +
                                 'This program is free software: you can redistribute it and/or modify it\n' +
                                 'under the terms of the GNU General Public License as published by the\n' +
                                 'Free Software Foundation, either version 3 of the License, or (at your option)\n' +
                                 'any later version.\n\n' +
                                 'This program is distributed in the hope that it will be useful, but\n' +
                                 'WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n' +
                                 'or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n' +
                                 'more details.\n\n' +
                                 'You should have received a copy of the GNU General Public License along with\n' +
                                 'this program.  If not, see <http://www.gnu.org/licenses/>.')
        about_dialog.set_website(app_website)
        about_dialog.set_website_label(app_website)
        about_dialog.set_authors(['Santiago Caama単o <https://github.com/scaamanho/>'])
        about_dialog.set_documenters(['Santiago Caama単o <https://github.com/scaamanho/>'])
        about_dialog.set_translator_credits('')
        about_dialog.set_icon(GdkPixbuf.Pixbuf.new_from_file('images/icon.png'))
        about_dialog.set_logo(GdkPixbuf.Pixbuf.new_from_file('images/logo.png'))
        about_dialog.set_program_name(app_name)
        return about_dialog

    def main(self):
        gtk.main()


if __name__ == "__main__":
    ind = IndicatorProxy()
    ind.main()
